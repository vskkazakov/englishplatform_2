# tests/views.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse
from django.utils import timezone
from django.db.models import Q, Avg
import random

from dictionary.models import Word
from .models import TestSession, TestAnswer
from .forms import TestCategorySelectForm, TestAnswerForm


def index(request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–æ–≤"""
    context = {
        'title': '–¢–µ—Å—Ç—ã –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É'
    }
    return render(request, 'tests/index.html', context)  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: tests/index.html


@login_required
def categories(request):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–æ–≤–∞
    total_words = request.user.words.count()
    if total_words == 0:
        messages.warning(request, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.')
        return redirect('/dictionary/')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
    
    if request.method == 'POST':
        form = TestCategorySelectForm(request.POST, user=request.user)
        if form.is_valid():
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏
            test_config = {
                'categories': form.cleaned_data['categories'],
                'words_count': form.cleaned_data['words_count'],
                'test_mode': form.cleaned_data['test_mode'],
                'include_learned': form.cleaned_data['include_learned'],
                'word_selection': form.cleaned_data['word_selection'],
            }
            request.session['test_config'] = test_config
            return redirect('tests:start')  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: tests:start
    else:
        form = TestCategorySelectForm(user=request.user)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞
    categories_count = request.user.words.values('category').distinct().count()
    
    context = {
        'form': form,
        'total_words': total_words,
        'categories_count': categories_count,
        'title': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    }
    
    return render(request, 'tests/categories.html', context)  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û


@login_required
def start(request):
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–µ—Å—Å–∏–∏
    test_config = request.session.get('test_config')
    if not test_config:
        messages.warning(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.')
        return redirect('tests:categories')  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_session = TestSession.objects.create(
        user=request.user,
        categories=test_config['categories']
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º queryset —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    words_queryset = request.user.words.filter(
        category__in=test_config['categories']
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if not test_config['include_learned']:
        words_queryset = words_queryset.filter(is_learned=False)
    
    # –ú–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤
    selection_method = test_config['word_selection']
    if selection_method == 'least_practiced':
        words_queryset = words_queryset.order_by('times_practiced')
    elif selection_method == 'newest':
        words_queryset = words_queryset.order_by('-created_at')
    elif selection_method == 'most_difficult':
        words_queryset = words_queryset.filter(
            difficulty_level__in=['advanced', 'proficiency']
        ).order_by('times_practiced')
    else:  # random
        words_queryset = words_queryset.order_by('?')
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
    words_count = min(test_config['words_count'], words_queryset.count())
    selected_words = list(words_queryset[:words_count])
    
    if not selected_words:
        messages.warning(request, '–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.')
        return redirect('tests:categories')  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û
    
    # –î–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    if test_config['test_mode'] == 'mixed':
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
        modes = ['en_to_ru', 'ru_to_en'] * (len(selected_words) // 2 + 1)
        random.shuffle(modes)
        word_modes = modes[:len(selected_words)]
    else:
        word_modes = [test_config['test_mode']] * len(selected_words)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞ –∏ –∏—Ö —Ä–µ–∂–∏–º—ã –≤ —Å–µ—Å—Å–∏–∏
    test_words_data = []
    for i, word in enumerate(selected_words):
        test_words_data.append({
            'word_id': word.id,
            'mode': word_modes[i]
        })
    
    request.session['test_session_id'] = test_session.id
    request.session['test_words_data'] = test_words_data
    request.session['current_word_index'] = 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
    test_session.total_words = len(selected_words)
    test_session.save()
    
    return redirect('tests:question')  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û


@login_required
def question(request):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    test_session_id = request.session.get('test_session_id')
    test_words_data = request.session.get('test_words_data', [])
    current_index = request.session.get('current_word_index', 0)
    
    if not test_session_id or not test_words_data:
        messages.error(request, '–°–µ—Å—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        return redirect('tests:categories')  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —Ç–µ—Å—Ç
    if current_index >= len(test_words_data):
        return redirect('tests:results')  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û
    
    try:
        test_session = TestSession.objects.get(id=test_session_id, user=request.user)
    except TestSession.DoesNotExist:
        messages.error(request, '–°–µ—Å—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        return redirect('tests:categories')  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
    current_word_data = test_words_data[current_index]
    current_word = get_object_or_404(
        Word, 
        id=current_word_data['word_id'], 
        user=request.user
    )
    current_mode = current_word_data['mode']
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    if request.method == 'POST':
        form = TestAnswerForm(request.POST, word=current_word, test_mode=current_mode)
        if form.is_valid():
            is_correct = form.is_correct()
            user_answer = form.cleaned_data['answer']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            TestAnswer.objects.create(
                test_session=test_session,
                word=current_word,
                user_answer=user_answer,
                is_correct=is_correct
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
            if is_correct:
                test_session.correct_answers += 1
                messages.success(request, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ')
            else:
                test_session.incorrect_answers += 1
                correct_answer = form.get_correct_answer()
                messages.error(request, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}')
            
            test_session.save()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
            request.session['current_word_index'] = current_index + 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
            context = {
                'show_result': True,
                'is_correct': is_correct,
                'current_word': current_word,
                'user_answer': user_answer,
                'correct_answer': form.get_correct_answer(),
                'current_index': current_index + 1,
                'total_words': len(test_words_data),
                'test_mode': current_mode,
                'progress_percentage': int(((current_index + 1) / len(test_words_data)) * 100)
            }
            
            return render(request, 'tests/question.html', context)  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û
    else:
        form = TestAnswerForm(word=current_word, test_mode=current_mode)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if current_mode == 'en_to_ru':
        question_word = current_word.english_word
        question_hint = f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {current_word.transcription}" if current_word.transcription else ""
        question_type = "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:"
    else:  # ru_to_en
        question_word = current_word.russian_translation
        question_hint = f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {current_word.definition}" if current_word.definition else ""
        question_type = "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:"
    
    context = {
        'form': form,
        'current_word': current_word,
        'question_word': question_word,
        'question_hint': question_hint,
        'question_type': question_type,
        'current_index': current_index + 1,
        'total_words': len(test_words_data),
        'test_mode': current_mode,
        'progress_percentage': int(((current_index + 1) / len(test_words_data)) * 100),
        'show_result': False
    }
    
    return render(request, 'tests/question.html', context)  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û


@login_required
def results(request):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    test_session_id = request.session.get('test_session_id')
    
    if not test_session_id:
        messages.error(request, '–°–µ—Å—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        return redirect('tests:categories')  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û
    
    try:
        test_session = TestSession.objects.get(id=test_session_id, user=request.user)
    except TestSession.DoesNotExist:
        messages.error(request, '–°–µ—Å—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        return redirect('tests:categories')  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
    test_session.end_time = timezone.now()
    test_session.is_completed = True
    test_session.save()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    answers = test_session.answers.all().order_by('answer_time')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_stats = {}
    for answer in answers:
        category = answer.word.category
        if category not in category_stats:
            category_stats[category] = {'correct': 0, 'total': 0}
        
        category_stats[category]['total'] += 1
        if answer.is_correct:
            category_stats[category]['correct'] += 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category in category_stats:
        total = category_stats[category]['total']
        correct = category_stats[category]['correct']
        category_stats[category]['percentage'] = int((correct / total) * 100) if total > 0 else 0
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    session_keys = ['test_session_id', 'test_words_data', 'current_word_index', 'test_config']
    for key in session_keys:
        request.session.pop(key, None)
    
    context = {
        'test_session': test_session,
        'answers': answers,
        'category_stats': category_stats,
        'success_rate': test_session.get_success_rate(),
        'duration': test_session.get_duration_minutes(),
    }
    
    return render(request, 'tests/results.html', context)  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û


@login_required
def history(request):
    """–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤"""
    test_sessions = request.user.test_sessions.filter(
        is_completed=True
    ).order_by('-start_time')[:20]
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
    total_tests = request.user.test_sessions.filter(is_completed=True).count()
    if total_tests > 0:
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        completed_tests = request.user.test_sessions.filter(is_completed=True)
        total_success = sum([test.get_success_rate() for test in completed_tests])
        avg_success_rate = int(total_success / total_tests) if total_tests > 0 else 0
    else:
        avg_success_rate = 0
    
    context = {
        'test_sessions': test_sessions,
        'total_tests': total_tests,
        'avg_success_rate': avg_success_rate,
        'title': '–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤'
    }
    
    return render(request, 'tests/history.html', context)  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û
