# tests/forms.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from django import forms
from django.core.exceptions import ValidationError
from dictionary.models import Word
import re


class TestCategorySelectForm(forms.Form):
    """–§–æ—Ä–º–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    categories = forms.MultipleChoiceField(
        choices=[],
        widget=forms.CheckboxSelectMultiple(attrs={
            'class': 'form-check-input'
        }),
        label="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        help_text="–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
    )
    
    words_count = forms.IntegerField(
        min_value=5,
        max_value=50,
        initial=10,
        widget=forms.NumberInput(attrs={
            'class': 'form-control',
            'min': '5',
            'max': '50'
        }),
        label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ—Å—Ç–µ"
    )
    
    test_mode = forms.ChoiceField(
        choices=[
            ('en_to_ru', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π'),
            ('ru_to_en', '–†—É—Å—Å–∫–∏–π ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π'),
            ('mixed', '–°–º–µ—à–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º'),
        ],
        initial='en_to_ru',
        widget=forms.RadioSelect(attrs={
            'class': 'form-check-input'
        }),
        label="–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    
    include_learned = forms.BooleanField(
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        }),
        label="–í–∫–ª—é—á–∏—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"
    )
    
    word_selection = forms.ChoiceField(
        choices=[
            ('random', '–°–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞'),
            ('least_practiced', '–ù–∞–∏–º–µ–Ω–µ–µ –∏–∑—É—á–∞–µ–º—ã–µ'),
            ('newest', '–ù–æ–≤—ã–µ —Å–ª–æ–≤–∞'),
            ('most_difficult', '–°–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞'),
        ],
        initial='random',
        widget=forms.Select(attrs={
            'class': 'form-control'
        }),
        label="–ú–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤"
    )

    def __init__(self, *args, user=None, **kwargs):
        super().__init__(*args, **kwargs)
        if user:
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            categories = user.words.values_list('category', flat=True).distinct().order_by('category')
            category_choices = []
            
            for cat in categories:
                if cat:
                    words_count = user.words.filter(category=cat).count()
                    category_choices.append((cat, f"{cat.title()} ({words_count} —Å–ª–æ–≤)"))
            
            self.fields['categories'].choices = category_choices
            
            if not category_choices:
                self.fields['categories'].choices = [('', '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ')]
        
    def clean_categories(self):
        categories = self.cleaned_data.get('categories')
        if not categories:
            raise ValidationError("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return categories

    def clean_words_count(self):
        words_count = self.cleaned_data.get('words_count')
        if words_count < 5:
            raise ValidationError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞: 5")
        if words_count > 50:
            raise ValidationError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞: 50")
        return words_count


class TestAnswerForm(forms.Form):
    """–§–æ—Ä–º–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–µ"""
    
    answer = forms.CharField(
        max_length=200,
        widget=forms.TextInput(attrs={
            'class': 'form-control form-control-lg',
            'placeholder': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç...',
            'autocomplete': 'off',
            'autofocus': True
        }),
        label="–í–∞—à –æ—Ç–≤–µ—Ç"
    )

    def __init__(self, *args, word=None, test_mode='en_to_ru', **kwargs):
        super().__init__(*args, **kwargs)
        self.word = word
        self.test_mode = test_mode
        
        if test_mode == 'en_to_ru':
            self.fields['answer'].widget.attrs['placeholder'] = '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π...'
        elif test_mode == 'ru_to_en':
            self.fields['answer'].widget.attrs['placeholder'] = '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...'

    def clean_answer(self):
        answer = self.cleaned_data.get('answer', '').strip()
        if not answer:
            raise ValidationError("–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return answer

    def is_correct(self):
        """üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
        if not self.word or not self.is_valid():
            return False

        user_answer = self.cleaned_data['answer'].strip()
        
        if self.test_mode == 'en_to_ru':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π - —Å—Ç—Ä–æ–≥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            correct_answers = []
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥
            main_translation = self.word.russian_translation.strip()
            correct_answers.append(main_translation)
            
            # –í–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
            if ',' in main_translation:
                variants = [ans.strip() for ans in main_translation.split(',') if ans.strip()]
                correct_answers.extend(variants)
            
            if ';' in main_translation:
                variants = [ans.strip() for ans in main_translation.split(';') if ans.strip()]
                correct_answers.extend(variants)
                
        elif self.test_mode == 'ru_to_en':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π - —Å—Ç—Ä–æ–≥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            correct_answers = [self.word.english_word.strip()]
        
        # üîß –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
        for correct in correct_answers:
            if user_answer.lower() == correct.lower():
                return True
        
        return False

    def get_correct_answer(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        if not self.word:
            return ""
        
        if self.test_mode == 'en_to_ru':
            return self.word.russian_translation
        elif self.test_mode == 'ru_to_en':
            return self.word.english_word
        
        return ""
