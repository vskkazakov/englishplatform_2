# dictionary/forms.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from django import forms
from django.core.exceptions import ValidationError
from .models import Word, StudySession
import re


class WordForm(forms.ModelForm):
    class Meta:
        model = Word
        fields = [
            'english_word',
            'russian_translation',
            'transcription',
            'definition',
            'example_sentence',
            'category',
            'difficulty_level',
        ]
        widgets = {
            'english_word': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ',
                'required': True,
            }),
            'russian_translation': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥',
                'required': True,
            }),
            'transcription': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '[Ààw…úÀêrd] - —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)',
            }),
            'definition': forms.Textarea(attrs={
                'class': 'form-control',
                'placeholder': '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º',
                'rows': 3,
            }),
            'example_sentence': forms.Textarea(attrs={
                'class': 'form-control',
                'placeholder': '–ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                'rows': 2,
            }),
            'category': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ë–∏–∑–Ω–µ—Å, IT)',
                'list': 'category-datalist',
            }),
            'difficulty_level': forms.Select(attrs={
                'class': 'form-control',
            }),
        }

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)
        self.fields['english_word'].label = "–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ"
        self.fields['russian_translation'].label = "–†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥"
        self.fields['transcription'].label = "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"
        self.fields['definition'].label = "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
        self.fields['example_sentence'].label = "–ü—Ä–∏–º–µ—Ä"
        self.fields['category'].label = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        self.fields['difficulty_level'].label = "–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"

    def clean_english_word(self):
        english_word = self.cleaned_data.get('english_word', '').strip()
        if not english_word:
            raise ValidationError("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        if not re.match(r"^[a-zA-Z\s\-']+$", english_word):
            raise ValidationError("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã.")
        if len(english_word) < 2:
            raise ValidationError("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return english_word.lower()

    def clean_russian_translation(self):
        translation = self.cleaned_data.get('russian_translation', '').strip()
        if not translation:
            raise ValidationError("–†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        if len(translation) < 1:
            raise ValidationError("–†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 1 —Å–∏–º–≤–æ–ª.")
        return translation

    def clean_transcription(self):
        transcription = self.cleaned_data.get('transcription', '')
        if transcription:
            transcription = transcription.strip()
            if not (transcription.startswith('[') and transcription.endswith(']')) and \
               not (transcription.startswith('/') and transcription.endswith('/')):
                transcription = f'[{transcription}]'
            return transcription
        return ''

    def clean(self):
        """üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        cleaned_data = super().clean()
        english_word = cleaned_data.get('english_word')
        category = cleaned_data.get('category')
        
        if self.user and english_word and category:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_query = Word.objects.filter(
                user=self.user,
                english_word__iexact=english_word,
                category__iexact=category
            )
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            if self.instance and self.instance.pk:
                existing_query = existing_query.exclude(pk=self.instance.pk)
            
            if existing_query.exists():
                raise ValidationError({
                    'english_word': f'–°–ª–æ–≤–æ "{english_word}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}". '
                                   '–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –∂–µ —Å–ª–æ–≤–æ –≤ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.'
                })
        
        return cleaned_data

    def save(self, commit=True):
        word = super().save(commit=False)
        if self.user and not word.pk:
            word.user = self.user
        if commit:
            word.save()
        return word


class QuickWordForm(forms.ModelForm):
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    
    class Meta:
        model = Word
        fields = ['english_word', 'russian_translation', 'transcription', 'definition', 'example_sentence']
        widgets = {
            'english_word': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ',
                'required': True,
                'autofocus': True
            }),
            'russian_translation': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥',
                'required': True
            }),
            'transcription': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '[Ààw…úÀêrd] - —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
            }),
            'definition': forms.Textarea(attrs={
                'class': 'form-control',
                'placeholder': '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)',
                'rows': 2
            }),
            'example_sentence': forms.Textarea(attrs={
                'class': 'form-control',
                'placeholder': '–ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)',
                'rows': 2
            }),
        }

    def __init__(self, *args, user=None, category=None, **kwargs):
        super().__init__(*args, **kwargs)
        self.user = user
        self.category = category
        
        self.fields['english_word'].label = "–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ"
        self.fields['russian_translation'].label = "–†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥"
        self.fields['transcription'].label = "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"
        self.fields['definition'].label = "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
        self.fields['example_sentence'].label = "–ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"

    def clean_english_word(self):
        english_word = self.cleaned_data.get('english_word', '').strip()
        if not english_word:
            raise ValidationError("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        if not re.match(r"^[a-zA-Z\s\-']+$", english_word):
            raise ValidationError("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã.")
        if len(english_word) < 2:
            raise ValidationError("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if self.user and self.category:
            existing_word = Word.objects.filter(
                user=self.user,
                english_word__iexact=english_word,
                category__iexact=self.category
            )
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            if self.instance and self.instance.pk:
                existing_word = existing_word.exclude(pk=self.instance.pk)
            
            if existing_word.exists():
                raise ValidationError(f'–°–ª–æ–≤–æ "{english_word}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{self.category}". '
                                    '–≠—Ç–æ –∂–µ —Å–ª–æ–≤–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.')
        
        return english_word.lower()

    def clean_russian_translation(self):
        russian_translation = self.cleaned_data.get('russian_translation', '').strip()
        if not russian_translation:
            raise ValidationError("–†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        if len(russian_translation) < 1:
            raise ValidationError("–†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 1 —Å–∏–º–≤–æ–ª.")
        return russian_translation

    def clean_transcription(self):
        transcription = self.cleaned_data.get('transcription', '')
        if transcription:
            transcription = transcription.strip()
            if transcription and not (transcription.startswith('[') and transcription.endswith(']')) and \
               not (transcription.startswith('/') and transcription.endswith('/')):
                transcription = f'[{transcription}]'
            return transcription if transcription else None

    def save(self, commit=True):
        word = super().save(commit=False)
        if self.user:
            word.user = self.user
        if self.category:
            word.category = self.category
            word.difficulty_level = 'beginner'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if commit:
            word.save()
        return word


# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
class WordSearchForm(forms.Form):
    """–§–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤"""
    
    search_query = forms.CharField(
        max_length=100,
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–ü–æ–∏—Å–∫ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —Å–ª–æ–≤—É –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—É...',
        }),
        label="–ü–æ–∏—Å–∫"
    )
    
    category = forms.ChoiceField(
        choices=[],
        required=False,
        widget=forms.Select(attrs={
            'class': 'form-control'
        }),
        label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
    )
    
    difficulty_level = forms.ChoiceField(
        choices=[],
        required=False,
        widget=forms.Select(attrs={
            'class': 'form-control'
        }),
        label="–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
    )
    
    STATUS_CHOICES = [
        ('', '–í—Å–µ —Å–ª–æ–≤–∞'),
        ('learned', '–í—ã—É—á–µ–Ω–Ω—ã–µ'),
        ('not_learned', '–ù–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ'),
        ('needs_practice', '–¢—Ä–µ–±—É—é—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏'),
    ]
    
    status = forms.ChoiceField(
        choices=STATUS_CHOICES,
        required=False,
        widget=forms.Select(attrs={
            'class': 'form-control'
        }),
        label="–°—Ç–∞—Ç—É—Å –∏–∑—É—á–µ–Ω–∏—è"
    )
    
    SORT_CHOICES = [
        ('-created_at', '–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ'),
        ('created_at', '–°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ'),
        ('english_word', '–ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (–∞–Ω–≥–ª.)'),
        ('-times_practiced', '–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π'),
        ('-last_practiced', '–ü–æ –¥–∞—Ç–µ –∏–∑—É—á–µ–Ω–∏—è'),
    ]
    
    sort_by = forms.ChoiceField(
        choices=SORT_CHOICES,
        required=False,
        initial='-created_at',
        widget=forms.Select(attrs={
            'class': 'form-control'
        }),
        label="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"
    )

    def __init__(self, *args, user=None, **kwargs):
        super().__init__(*args, **kwargs)
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user:
            categories = user.words.values_list('category', flat=True).distinct().order_by('category')
            category_choices = [('', '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')] + [(cat, cat.title()) for cat in categories if cat]
            self.fields['category'].choices = category_choices
        else:
            self.fields['category'].choices = [('', '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')]
        
        # –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ –º–æ–¥–µ–ª–∏
        self.fields['difficulty_level'].choices = [('', '–í—Å–µ —É—Ä–æ–≤–Ω–∏')] + list(Word.DIFFICULTY_CHOICES)


class CategorySelectForm(forms.Form):
    """–§–æ—Ä–º–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    
    category = forms.ChoiceField(
        choices=[],
        widget=forms.Select(attrs={
            'class': 'form-control'
        }),
        label="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    )

    def __init__(self, *args, user=None, **kwargs):
        super().__init__(*args, **kwargs)
        if user:
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            categories = user.words.values_list('category', flat=True).distinct().order_by('category')
            category_choices = [(cat, cat.title()) for cat in categories if cat]
            if category_choices:
                self.fields['category'].choices = category_choices
            else:
                self.fields['category'].choices = [('', '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π')]


class NewCategoryForm(forms.Form):
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    
    category_name = forms.CharField(
        max_length=50,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–∏–∑–Ω–µ—Å, –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, IT...',
            'autofocus': True
        }),
        label="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    )

    def clean_category_name(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_name = self.cleaned_data.get('category_name', '').strip().lower()
        if not category_name:
            raise ValidationError("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        if len(category_name) < 2:
            raise ValidationError("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        if len(category_name) > 50:
            raise ValidationError("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return category_name


# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã (StudyConfigForm, BulkWordImportForm, WordQuizForm) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
class StudyConfigForm(forms.Form):
    """–§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏ –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤"""
    
    STUDY_MODES = [
        ('flashcards', '–ö–∞—Ä—Ç–æ—á–∫–∏ (–ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥)'),
        ('translation', '–ü–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ'),
        ('reverse_translation', '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π'),
        ('mixed', '–°–º–µ—à–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º'),
    ]
    
    mode = forms.ChoiceField(
        choices=STUDY_MODES,
        initial='flashcards',
        widget=forms.RadioSelect(attrs={
            'class': 'form-check-input'
        }),
        label="–†–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è"
    )
    
    words_count = forms.IntegerField(
        min_value=5,
        max_value=50,
        initial=10,
        widget=forms.NumberInput(attrs={
            'class': 'form-control',
            'min': '5',
            'max': '50'
        }),
        label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤"
    )
    
    categories = forms.MultipleChoiceField(
        choices=[],
        required=False,
        widget=forms.CheckboxSelectMultiple(attrs={
            'class': 'form-check-input'
        }),
        label="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"
    )
    
    difficulty_levels = forms.MultipleChoiceField(
        choices=[],
        required=False,
        widget=forms.CheckboxSelectMultiple(attrs={
            'class': 'form-check-input'
        }),
        label="–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
    )
    
    WORD_SELECTION_CHOICES = [
        ('random', '–°–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞'),
        ('least_practiced', '–ù–∞–∏–º–µ–Ω–µ–µ –∏–∑—É—á–∞–µ–º—ã–µ'),
        ('needs_practice', '–¢—Ä–µ–±—É—é—â–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏'),
        ('newest', '–ù–æ–≤—ã–µ —Å–ª–æ–≤–∞'),
        ('oldest', '–°—Ç–∞—Ä—ã–µ —Å–ª–æ–≤–∞'),
    ]
    
    selection_method = forms.ChoiceField(
        choices=WORD_SELECTION_CHOICES,
        initial='needs_practice',
        widget=forms.Select(attrs={
            'class': 'form-control'
        }),
        label="–ú–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤"
    )
    
    include_learned = forms.BooleanField(
        required=False,
        initial=False,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        }),
        label="–í–∫–ª—é—á–∏—Ç—å –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"
    )

    def __init__(self, *args, user=None, **kwargs):
        super().__init__(*args, **kwargs)
        if user:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            categories = user.words.values_list('category', flat=True).distinct().order_by('category')
            category_choices = [(cat, cat.title()) for cat in categories if cat]
            self.fields['categories'].choices = category_choices
        else:
            self.fields['categories'].choices = []
        
        # –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ –º–æ–¥–µ–ª–∏
        self.fields['difficulty_levels'].choices = list(Word.DIFFICULTY_CHOICES)


class BulkWordImportForm(forms.Form):
    """–§–æ—Ä–º–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Å–ª–æ–≤"""
    
    words_text = forms.CharField(
        widget=forms.Textarea(attrs={
            'class': 'form-control',
            'rows': 10,
            'placeholder': '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nword1 - –ø–µ—Ä–µ–≤–æ–¥1\nword2 - –ø–µ—Ä–µ–≤–æ–¥2\n...'
        }),
        label="–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤",
        help_text="–§–æ—Ä–º–∞—Ç: '–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ_—Å–ª–æ–≤–æ - —Ä—É—Å—Å–∫–∏–π_–ø–µ—Ä–µ–≤–æ–¥' (–∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)"
    )
    
    default_category = forms.CharField(
        max_length=50,
        initial='–æ–±—â–∏–µ',
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–∏–∑–Ω–µ—Å, IT, –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'
        }),
        label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    )
    
    default_difficulty = forms.ChoiceField(
        choices=[],
        initial='beginner',
        widget=forms.Select(attrs={
            'class': 'form-control'
        }),
        label="–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    )
    
    skip_duplicates = forms.BooleanField(
        required=False,
        initial=True,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input'
        }),
        label="–ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã"
    )

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ –º–æ–¥–µ–ª–∏
        self.fields['default_difficulty'].choices = list(Word.DIFFICULTY_CHOICES)

    def clean_words_text(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å–ª–æ–≤–∞–º–∏"""
        words_text = self.cleaned_data.get('words_text', '').strip()
        if not words_text:
            raise ValidationError("–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        
        lines = [line.strip() for line in words_text.split('\n') if line.strip()]
        if not lines:
            raise ValidationError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.")
        
        parsed_words = []
        errors = []
        
        for i, line in enumerate(lines, 1):
            if ' - ' not in line:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥'")
                continue
            
            parts = line.split(' - ', 1)
            if len(parts) != 2:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                continue
            
            english_word = parts[0].strip()
            russian_translation = parts[1].strip()
            
            if not english_word or not russian_translation:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –ø—É—Å—Ç–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥")
                continue
            
            if not re.match(r"^[a-zA-Z\s\-']+$", english_word):
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: '{english_word}' —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
                continue
            
            parsed_words.append({
                'english_word': english_word.lower(),
                'russian_translation': russian_translation
            })
        
        if errors:
            raise ValidationError("–û—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" + "\n".join(errors))
        
        if not parsed_words:
            raise ValidationError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.")
        
        return parsed_words


class WordQuizForm(forms.Form):
    """–§–æ—Ä–º–∞ –¥–ª—è –∫–≤–∏–∑–∞ –ø–æ —Å–ª–æ–≤–∞–º"""
    
    answer = forms.CharField(
        max_length=200,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç...',
            'autocomplete': 'off'
        }),
        label="–í–∞—à –æ—Ç–≤–µ—Ç"
    )

    def __init__(self, *args, word=None, mode='translation', **kwargs):
        super().__init__(*args, **kwargs)
        self.word = word
        self.mode = mode
        
        if mode == 'translation':
            self.fields['answer'].widget.attrs['placeholder'] = '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π...'
        elif mode == 'reverse_translation':
            self.fields['answer'].widget.attrs['placeholder'] = '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...'

    def clean_answer(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        answer = self.cleaned_data.get('answer', '').strip()
        if not answer:
            raise ValidationError("–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return answer

    def is_correct(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
        if not self.word or not self.is_valid():
            return False

        user_answer = self.cleaned_data['answer'].lower().strip()
        
        if self.mode == 'translation':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            correct_answers = [
                self.word.russian_translation.lower().strip()
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
            if ',' in self.word.russian_translation:
                correct_answers.extend([
                    ans.strip().lower()
                    for ans in self.word.russian_translation.split(',')
                ])
            
            if ';' in self.word.russian_translation:
                correct_answers.extend([
                    ans.strip().lower()
                    for ans in self.word.russian_translation.split(';')
                ])
                
        elif self.mode == 'reverse_translation':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
            correct_answers = [
                self.word.english_word.lower().strip()
            ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        for correct in correct_answers:
            if user_answer == correct:
                return True
        
        return False

    def get_correct_answer(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        if not self.word:
            return ""
        
        if self.mode == 'translation':
            return self.word.russian_translation
        elif self.mode == 'reverse_translation':
            return self.word.english_word
        
        return ""
