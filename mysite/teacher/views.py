# teacher/views.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –û–¢–õ–ê–î–ö–û–ô

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.db.models import Q
from django.core.paginator import Paginator
from django.http import JsonResponse
from django.utils import timezone

from .models import TeacherRequest, TeacherStudentRelationship
from .forms import TeacherRequestForm, TeacherResponseForm, TeacherSearchForm
from authen.models import UserProfile
from students.models import Homework, StudentRequest
from students.models import StudentTeacherRelationship
from students.models import StudentRequest, StudentTeacherRelationship, Homework, CategorySharingRequest

@login_required
def index(request):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—á–∏—Ç–µ–ª–µ–π —É—á–µ–Ω–∏–∫–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —É—á–∏—Ç–µ–ª–µ–π - –° –û–¢–õ–ê–î–ö–û–ô
    """
    print(f"\n=== DEBUG teacher.views.index ===")
    print(f"User: {request.user.email}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–µ–Ω–∏–∫
    try:
        profile = UserProfile.objects.get(user=request.user)
        print(f"User profile role: {profile.role}")
        if profile.role != 'student':
            print(f"User is not student, redirecting...")
            return redirect('index')
    except UserProfile.DoesNotExist:
        print(f"UserProfile not found, redirecting...")
        return redirect('index')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö —É—á–∏—Ç–µ–ª–µ–π (—Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å)
    current_teachers = StudentTeacherRelationship.objects.filter(
        student=request.user
    ).select_related('teacher').order_by('-started_at')
    print(f"Current teachers count: {current_teachers.count()}")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç —É—á–∏—Ç–µ–ª–µ–π
    incoming_requests = StudentRequest.objects.filter(
        student=request.user,
        status='pending'
    ).select_related('teacher').order_by('-created_at')
    print(f"Incoming requests count: {incoming_requests.count()}")

    # –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_requests = CategorySharingRequest.objects.filter(
        student=request.user,
        status='pending'
    ).select_related('teacher', 'category').order_by('-created_at')
    print(f"üìö CATEGORY REQUESTS COUNT: {category_requests.count()}")

    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for i, req in enumerate(category_requests):
        print(f"  Category Request {i+1}:")
        print(f"    ID: {req.id}")
        print(f"    Teacher: {req.teacher.username}")
        print(f"    Student: {req.student.username}")
        print(f"    Category: {req.category.name}")
        print(f"    Status: {req.status}")
        print(f"    Created: {req.created_at}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫—É
    homework_list = Homework.objects.filter(
        student=request.user
    ).select_related('teacher').order_by('-created_at')
    print(f"Homework count: {homework_list.count()}")

    context = {
        'current_teachers': current_teachers,
        'incoming_requests': incoming_requests,
        'category_requests': category_requests, # –ù–û–í–û–ï
        'homework_list': homework_list,
    }
    print(f"Context category_requests: {len(context['category_requests'])}")

    return render(request, 'teacher/teacher.html', context)

@login_required
def my_teachers(request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ —É—á–∏—Ç–µ–ª–µ–π - –° –û–¢–õ–ê–î–ö–û–ô
    """
    print(f"\n=== DEBUG teacher.views.my_teachers ===")
    print(f"User: {request.user.email}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–µ–Ω–∏–∫
    try:
        profile = UserProfile.objects.get(user=request.user)
        print(f"User profile role: {profile.role}")
        if profile.role != 'student':
            messages.error(request, '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤')
            return redirect('index')
    except UserProfile.DoesNotExist:
        messages.error(request, '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return redirect('index')

    # –ü–æ–ª—É—á–∞–µ–º —É—á–∏—Ç–µ–ª–µ–π —É—á–µ–Ω–∏–∫–∞
    relationships = TeacherStudentRelationship.objects.filter(
        student=request.user,
        is_active=True
    ).select_related('teacher', 'teacher__userprofile')

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç —É—á–∏—Ç–µ–ª–µ–π –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è students
    incoming_requests = StudentRequest.objects.filter(
        student=request.user,
        status='pending'
    ).select_related('teacher', 'teacher__userprofile')

    # –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_requests = CategorySharingRequest.objects.filter(
        student=request.user,
        status='pending'
    ).select_related('teacher', 'category').order_by('-created_at')
    print(f"üìö MY_TEACHERS CATEGORY REQUESTS COUNT: {category_requests.count()}")

    for i, req in enumerate(category_requests):
        print(f"  Category Request {i+1}:")
        print(f"    ID: {req.id}")
        print(f"    Teacher: {req.teacher.username}")
        print(f"    Student: {req.student.username}")
        print(f"    Category: {req.category.name}")
        print(f"    Status: {req.status}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    homework_list = Homework.objects.filter(
        student=request.user
    ).select_related('teacher').order_by('-created_at')

    context = {
        'relationships': relationships,
        'incoming_requests': incoming_requests,
        'category_requests': category_requests, # –ù–û–í–û–ï
        'homework_list': homework_list,
    }

    return render(request, 'teacher/my_teachers.html', context)

@login_required
def send_request(request, teacher_id):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –æ—Ç —É—á–µ–Ω–∏–∫–∞ –∫ —É—á–∏—Ç–µ–ª—é
    """
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–µ–Ω–∏–∫
    try:
        profile = UserProfile.objects.get(user=request.user)
        if profile.role != 'student':
            return JsonResponse({'success': False, 'error': '–¢–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã'})
    except UserProfile.DoesNotExist:
        return JsonResponse({'success': False, 'error': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–∏—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è —É—á–∏—Ç–µ–ª–µ–º
    try:
        teacher_profile = UserProfile.objects.get(user_id=teacher_id, role='teacher')
    except UserProfile.DoesNotExist:
        return JsonResponse({'success': False, 'error': '–£—á–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    if TeacherRequest.objects.filter(student=request.user, teacher_id=teacher_id).exists():
        return JsonResponse({'success': False, 'error': '–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'})
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
    form = TeacherRequestForm(request.POST)
    if form.is_valid():
        request_obj = form.save(commit=False)
        request_obj.student = request.user
        request_obj.teacher_id = teacher_id
        request_obj.save()
        
        return JsonResponse({
            'success': True,
            'message': f'–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—á–∏—Ç–µ–ª—é {teacher_profile.user.get_full_name()}'
        })
    else:
        return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã'})

@login_required
def cancel_request(request, request_id):
    """
    –û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –æ—Ç —É—á–µ–Ω–∏–∫–∞ –∫ —É—á–∏—Ç–µ–ª—é
    """
    try:
        teacher_request = TeacherRequest.objects.get(
            id=request_id,
            student=request.user,
            status='pending'
        )
        teacher_request.status = 'cancelled'
        teacher_request.save()
        messages.success(request, '–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω')
    except TeacherRequest.DoesNotExist:
        messages.error(request, '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    return redirect('teacher:index')


@login_required
def respond_to_request(request, request_id):
    """
    –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å —É—á–∏—Ç–µ–ª—è
    """
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–µ–Ω–∏–∫
    try:
        profile = UserProfile.objects.get(user=request.user)
        if profile.role != 'student':
            return JsonResponse({'success': False, 'error': '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤'})
    except UserProfile.DoesNotExist:
        return JsonResponse({'success': False, 'error': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è students
    try:
        student_request = StudentRequest.objects.get(
            id=request_id,
            student=request.user,
            status='pending'
        )
    except StudentRequest.DoesNotExist:
        return JsonResponse({'success': False, 'error': '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    status = request.POST.get('status')
    if status in ['accepted', 'rejected']:
        student_request.status = status
        student_request.save()
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, —Å–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ students
        if status == 'accepted':
            from students.models import StudentTeacherRelationship
            StudentTeacherRelationship.objects.get_or_create(
                student=request.user,
                teacher=student_request.teacher
            )
        
        return JsonResponse({
            'success': True,
            'message': f'–ó–∞–ø—Ä–æ—Å {student_request.get_status_display().lower()}',
            'status': status
        })
    else:
        return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å'})

@login_required
def view_homework(request, homework_id):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–º
    """
    homework = get_object_or_404(Homework, id=homework_id, student=request.user)
    
    context = {
        'homework': homework,
    }
    
    return render(request, 'teacher/view_homework.html', context)

@login_required
def complete_homework(request, homework_id):
    """
    –û—Ç–º–µ—Ç–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ
    """
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–µ–Ω–∏–∫
    try:
        profile = UserProfile.objects.get(user=request.user)
        if profile.role != 'student':
            return JsonResponse({'success': False, 'error': '–¢–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ'})
    except UserProfile.DoesNotExist:
        return JsonResponse({'success': False, 'error': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    try:
        homework = Homework.objects.get(id=homework_id, student=request.user)
    except Homework.DoesNotExist:
        return JsonResponse({'success': False, 'error': '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'})
    
    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
    homework.is_completed = True
    homework.completed_at = timezone.now()
    homework.save()
    
    return JsonResponse({
        'success': True,
        'message': '–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ'
    })

@login_required
@login_required
def respond_to_category_request(request, request_id):
    """
    –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç —É—á–∏—Ç–µ–ª—è
    """
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥'})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–µ–Ω–∏–∫
    try:
        profile = UserProfile.objects.get(user=request.user)
        if profile.role != 'student':
            return JsonResponse({'success': False, 'error': '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤'})
    except UserProfile.DoesNotExist:
        return JsonResponse({'success': False, 'error': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'})

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    try:
        category_request = CategorySharingRequest.objects.get(
            id=request_id,
            student=request.user,
            status='pending'
        )
    except CategorySharingRequest.DoesNotExist:
        return JsonResponse({'success': False, 'error': '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'})

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    status = request.POST.get('status')
    student_response = request.POST.get('student_response', '')

    if status in ['accepted', 'rejected']:
        category_request.status = status
        category_request.student_response = student_response
        category_request.save()

        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –∫–æ–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—á–µ–Ω–∏–∫—É
        if status == 'accepted':
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ dictionary
                from dictionary.models import Category, Word

                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
                original_category = category_request.category
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                new_category_name = f"{original_category.name} (–æ—Ç {category_request.teacher.get_full_name()})"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É —É—á–µ–Ω–∏–∫–∞
                new_category, created = Category.objects.get_or_create(
                    name=new_category_name,
                    created_by=request.user,
                    defaults={
                        'description': f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç —É—á–∏—Ç–µ–ª—è {category_request.teacher.get_full_name()}. {original_category.description or ''}"
                    }
                )

                if created:
                    # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    original_words = Word.objects.filter(category=original_category)
                    for word in original_words:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ —É —É—á–µ–Ω–∏–∫–∞ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        Word.objects.get_or_create(
                            english=word.english,
                            category=new_category,
                            created_by=request.user,
                            defaults={
                                'russian': word.russian,
                                'pronunciation': word.pronunciation,
                                'example': word.example,
                                # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                            }
                        )

                return JsonResponse({
                    'success': True,
                    'message': f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{original_category.name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å!'
                })
            except Exception as e:
                return JsonResponse({'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}'})
        else:
            return JsonResponse({
                'success': True,
                'message': '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω'
            })
    else:
        return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å'})